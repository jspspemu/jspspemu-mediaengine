type int = number;
interface pointer { __pointer:string; }

const enum AudioFormat {
	MP2 = 0x15000,
	MP3 = 0x15001,
}

declare var HEAP8:Uint8Array;
declare function _malloc(size:int):pointer;
declare function _free(ptr:pointer):void;

interface MeState { __me_prt:string;}
declare function _me_audio_decode_alloc(format:AudioFormat):MeState;
declare function _me_audio_decode_free(state:MeState):void;
declare function _me_audio_decode_get_numsamples(state:MeState):int;
declare function _me_audio_decode_get_numchannels(state:MeState):int;
declare function _me_audio_decode_set_data(state:MeState, ptr:pointer, size:int):int;
declare function _me_audio_decode_get_data_size(state:MeState):int;
declare function _me_audio_decode_get_data(state:MeState, ptr:pointer):void;

declare function _me_audio_decode_get_sample(state:MeState, channel:int, sample:int):int;

function writeUint8ArrayToMemory(ptr:pointer, data:Uint8Array):void {
	var ptr2 = <number><any>ptr;
	HEAP8.subarray(ptr2, ptr2 + data.length).set(data);
}

function readUint8ArrayFromMemory(ptr:pointer, size:number):Uint8Array {
	var ptr2 = <number><any>ptr;
	var out = new Uint8Array(size);
	out.set(HEAP8.subarray(ptr2, ptr2 + size));
	return out;
}

class AudioDecoder {
	state: MeState;
	
	constructor(format:AudioFormat) {
		this.state = _me_audio_decode_alloc(10);
	}
	
	get numSamples() { return _me_audio_decode_get_numsamples(this.state); }
	get numChannels() { return _me_audio_decode_get_numchannels(this.state); }

	setData(data:Uint8Array) {
		var temp = _malloc(data.length);
		writeUint8ArrayToMemory(temp, data);
		_me_audio_decode_set_data(this.state, temp, data.length);
		_free(temp);
	}
	
	getData():Uint16Array {
		var size = _me_audio_decode_get_data_size(this.state);
		var data = _malloc(size);
		_me_audio_decode_get_data(this.state, data);
		var out = readUint8ArrayFromMemory(data, size);
		_free(data);
		return new Uint16Array(out.buffer);
	}

	getSample(channel:int, sample:int) {
		return _me_audio_decode_get_sample(this.state, channel, sample);
	}
 
	deinit() {
		_me_audio_decode_free(this.state);
	}
}

var compressedData = new Uint8Array([
    0xFF, 0xF3, 0x14, 0xC4, 0x00, 0x02, 0x70, 0x3A, 0xEC, 0x01, 0x43, 0x00, 0x01, 0x77, 0x77, 0x77,
    0x38, 0x80, 0x60, 0x60, 0x60, 0x6E, 0x3D, 0x87, 0xFF, 0xF3, 0x14, 0xC4, 0x01, 0x02, 0x80, 0x3B,
    0x04, 0x01, 0x8B, 0x00, 0x00, 0x7F, 0x90, 0x40, 0xC2, 0xA1, 0x24, 0x81, 0x93, 0xCE, 0x00, 0x0A,
    0xFF, 0xF3, 0x14, 0xC4, 0x02, 0x01, 0xB8, 0x37, 0x21, 0xE1, 0xC2, 0x00, 0x03, 0x3F, 0xF1, 0x4C,
    0x04, 0x14, 0x00, 0x0C, 0x2B, 0x80, 0x2C, 0x20, 0xFF, 0xF3, 0x14, 0xC4, 0x06, 0x01, 0xB0, 0x37,
    0x0D, 0xE0, 0x01, 0xCC, 0x27, 0x32, 0x01, 0x0E, 0x2B, 0x09, 0x44, 0xE9, 0x00, 0x0C, 0x20, 0xCC,
    0xFF, 0xF3, 0x14, 0xC4, 0x0A, 0x01, 0x80, 0x37, 0x21, 0xE0, 0x00, 0x4A, 0x23, 0x55, 0x55, 0x00,
    0x0C, 0x21, 0x32, 0x0A, 0x12, 0x00, 0x0C, 0x20, 0xFF, 0xF3, 0x14, 0xC4, 0x0F, 0x01, 0x58, 0x37,
    0x0D, 0xE0, 0x02, 0x8C, 0x43, 0xBE, 0x14, 0x0D, 0x00, 0x0C, 0x20, 0x48, 0xD1, 0x8A, 0x90, 0x8D,
    0xFF, 0xF3, 0x14, 0xC4, 0x14, 0x01, 0x78, 0x37, 0x0D, 0xE0, 0x02, 0x8C, 0x43, 0x56, 0x74, 0x4C,
    0xDB, 0x51, 0xBF, 0xCA, 0xBA, 0xC2, 0xF5, 0x4E, 0xFF, 0xF3, 0x14, 0xC4, 0x19, 0x01, 0x78, 0x37,
    0x15, 0xE0, 0x01, 0xCC, 0x43, 0x72, 0x0C, 0xB5, 0x31, 0x9E, 0x00, 0x1E, 0x20, 0x3A, 0x3C, 0x4D,
    0xFF, 0xF3, 0x14, 0xC4, 0x1E, 0x01, 0x58, 0x37, 0x19, 0xE0, 0x01, 0x4C, 0x43, 0x00, 0x0C, 0x21,
    0x26, 0x08, 0x59, 0x00, 0x0C, 0x21, 0x94, 0x2E, 0xFF, 0xF3, 0x14, 0xC4, 0x23, 0x02, 0x20, 0x3A,
    0xC4, 0x00, 0x03, 0xF4, 0x20, 0x95, 0x00, 0x0E, 0x21, 0x38, 0x11, 0x25, 0x00, 0x0C, 0x20, 0x22,
    0xFF, 0xF3, 0x14, 0xC4, 0x25, 0x02, 0x30, 0x3A, 0xC4, 0x00, 0x06, 0x84, 0x24, 0x12, 0x12, 0x00,
    0x1E, 0x20, 0x16, 0xC1, 0x11, 0xAD, 0x10, 0x0D, 0xFF, 0xF3, 0x14, 0xC4, 0x27, 0x01, 0x68, 0x37,
    0x21, 0xE0, 0x01, 0xCC, 0x43, 0x75, 0x57, 0x84, 0xA3, 0x84, 0x2A, 0x9D, 0xF5, 0x0C, 0x08, 0x35,
    0xFF, 0xF3, 0x14, 0xC4, 0x2C, 0x01, 0x70, 0x37, 0x09, 0xE0, 0x02, 0x8C, 0x43, 0x82, 0xE8, 0x15,
    0xD3, 0x34, 0xCD, 0xB5, 0x00, 0x1E, 0x20, 0x12, 0xFF, 0xF3, 0x14, 0xC4, 0x31, 0x01, 0x60, 0x37,
    0x0D, 0xE0, 0x02, 0x8A, 0x43, 0xE2, 0x46, 0xF1, 0x00, 0xCF, 0xE8, 0x87, 0x81, 0x31, 0x84, 0x8A,
    0xFF, 0xF3, 0x14, 0xC4, 0x36, 0x01, 0x60, 0x37, 0x21, 0xE0, 0x01, 0x44, 0x43, 0xF3, 0xC5, 0x61,
    0xDC, 0x04, 0x31, 0xDA, 0x08, 0x61, 0xA8, 0x18, 0xFF, 0xF3, 0x14, 0xC4, 0x3B, 0x01, 0x78, 0x37,
    0x11, 0xE0, 0x01, 0xCC, 0x43, 0xD7, 0xC6, 0x21, 0x5F, 0x49, 0x9A, 0x6A, 0xAF, 0x32, 0xC4, 0x80,
    0xFF, 0xF3, 0x14, 0xC4, 0x40, 0x01, 0xB8, 0x3F, 0x19, 0xE0, 0x01, 0xD0, 0x42, 0x48, 0xC2, 0x3B,
    0xA0, 0xBD, 0x15, 0x4C, 0x41, 0x4D, 0x45, 0x33, 0xFF, 0xF3, 0x14, 0xC4, 0x44, 0x02, 0x60, 0x42,
    0xFD, 0xE0, 0x03, 0x58, 0x0A, 0x2E, 0x39, 0x39, 0x2E, 0x33, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
    0xFF, 0xF3, 0x14, 0xC4, 0x45, 0x02, 0x60, 0x3E, 0xED, 0xE0, 0x00, 0x9E, 0x06, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xFF, 0xF3, 0x14, 0xC4, 0x46, 0x01, 0xB0, 0x3F,
    0x19, 0xE0, 0x01, 0xD2, 0x42, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
    0xFF, 0xF3, 0x14, 0xC4, 0x4A, 0x01, 0xD8, 0x37, 0x09, 0x41, 0x4A, 0x00, 0x00, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xFF, 0xF3, 0x14, 0xC4, 0x4D, 0x04, 0x20, 0x4E,
    0xEC, 0x01, 0x90, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
    0xFF, 0xF3, 0x14, 0xC4, 0x47, 0x02, 0xB8, 0x2A, 0xB8, 0x01, 0xC6, 0x00, 0x01, 0x55, 0x55, 0x55,
    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 
]);
                                                                                                                                            

var ad = new AudioDecoder(AudioFormat.MP3);
ad.setData(compressedData);
var samples = ad.numSamples;
var channels = ad.numChannels;
console.log(ad.getData());
/*
for (var n = 0; n < samples; n++) {
	for (var ch = 0; ch < channels; ch++) {
		console.log(ad.getSample(ch, n));
	}
}
*/
ad.deinit();
